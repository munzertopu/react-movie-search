{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","rows","this","getMovies","searchTerm","movieAPI","axios","get","then","res","results","data","console","log","movieRows","forEach","movie","poster_src","poster_path","title","movieRow","key","id","width","src","alt","overview","push","setState","event","target","value","className","href","style","marginLeft","onChange","searchChangeHandler","bind","placeholder","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kSAkHeA,G,8DA3Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHS,E,gEA8BjBC,KAAKC,UAAU,Y,gCAGPC,GAAa,IAAD,OACdC,EACJ,sIACAD,EACFE,IACGC,IAAIF,GAEJG,MAAK,SAAAC,GACJ,IAAMC,EAAUD,EAAIE,KAAKD,QAEzBE,QAAQC,IAAIH,GACZ,IAAII,EAAY,GAEhBJ,EAAQK,SAAQ,SAAAC,GACdA,EAAMC,WACJ,kDACAD,EAAME,YACRN,QAAQC,IAAIG,EAAMG,OAClBP,QAAQC,IAAIG,EAAMC,YAElB,IAAMG,EACJ,2BAAOC,IAAKL,EAAMM,IAChB,+BACE,4BACE,4BACE,yBAAKC,MAAM,MAAMC,IAAKR,EAAMC,WAAYQ,IAAI,YAE9C,4BACE,4BAAKT,EAAMG,OAEX,2BAAIH,EAAMU,cAMpBZ,EAAUa,KAAKP,MAGjB,EAAKQ,SAAS,CAAE3B,KAAMa,S,0CAIRe,GAClBjB,QAAQC,IAAIgB,EAAMC,OAAOC,OACzB,IAAM3B,EAAayB,EAAMC,OAAOC,MAChC7B,KAAKC,UAAUC,K,+BAIf,OACE,yBAAK4B,UAAU,IACb,yBAAKA,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,MAC/B,yBAAKV,MAAM,KAAKC,IAAI,mBAAmBC,IAAI,KAC3C,0BAAMS,MAAO,CAAEC,WAAY,SAA3B,kBAIJ,yBAAKH,UAAU,cACb,2BACEI,SAAUlC,KAAKmC,oBAAoBC,KAAKpC,MACxC8B,UAAU,wBACVO,YAAY,wBACZC,KAAK,UAIRtC,KAAKF,MAAMC,U,GAtGFwC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.356af013.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: []\n    };\n\n    //   const movies = [\n    //     {\n    //       id: 0,\n    //       title: \"Avengers : The Infinity War\",\n    //       poster_src:\n    //         \"https://image.tmdb.org/t/p/w185_and_h278_bestv2/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\",\n    //       plot:\n    //         \"As the Avengers and their allies have continued to protect the world from threats too large for any one hero to handle, a new danger has emerged from the cosmic shadows: Thanos. A despot of intergalactic infamyâ€¦\"\n    //     },\n    //     {\n    //       id: 1,\n    //       title: \"The Avengers\",\n    //       poster_src:\n    //         \"https://image.tmdb.org/t/p/w185_and_h278_bestv2/or06FN3Dka5tukK1e9sl16pB3iy.jpg\",\n    //       plot: \"the second plot\"\n    //     }\n    //   ];\n\n    //   movies.forEach(movie => {\n    //     console.log(movie.title);\n    //   });\n  }\n\n  componentDidMount() {\n    this.getMovies(\"batman\");\n  }\n\n  getMovies(searchTerm) {\n    const movieAPI =\n      \"https://api.themoviedb.org/3/search/movie?api_key=3824ca0ab0ed2c88932d7a8379d969ad&language=en-US&page=1&include_adult=false&query=\" +\n      searchTerm;\n    axios\n      .get(movieAPI)\n\n      .then(res => {\n        const results = res.data.results;\n\n        console.log(results);\n        var movieRows = [];\n\n        results.forEach(movie => {\n          movie.poster_src =\n            \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" +\n            movie.poster_path;\n          console.log(movie.title);\n          console.log(movie.poster_src);\n\n          const movieRow = (\n            <table key={movie.id}>\n              <tbody>\n                <tr>\n                  <td>\n                    <img width=\"120\" src={movie.poster_src} alt=\"poster\" />\n                  </td>\n                  <td>\n                    <h3>{movie.title}</h3>\n\n                    <p>{movie.overview}</p>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          );\n          movieRows.push(movieRow);\n        });\n\n        this.setState({ rows: movieRows });\n      });\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value);\n    const searchTerm = event.target.value;\n    this.getMovies(searchTerm);\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"/#\">\n            <img width=\"50\" src=\"the-movie-db.svg\" alt=\"\" />\n            <span style={{ marginLeft: \"1rem\" }}>The Movie DB</span>\n          </a>\n        </nav>\n\n        <div className=\"form-group\">\n          <input\n            onChange={this.searchChangeHandler.bind(this)}\n            className=\"form-control input-lg\"\n            placeholder=\"Search The movie here\"\n            type=\"text\"\n          />\n        </div>\n\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}